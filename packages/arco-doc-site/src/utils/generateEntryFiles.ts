import fs from 'fs-extra';
import path from 'path';
import glob from 'glob';
import { print } from '@arco-design/arco-dev-utils';
import getMainConfig from './getMainConfig';

const VARIABLE_PREFIX = 'arcoSite';

const { build: buildConfig, site: siteConfig } = getMainConfig();
const entryFileDir = path.resolve('__temp__');

export function getPathEntryByLanguage(language: string) {
  return path.resolve(entryFileDir, `index.js`.replace(/.js$/, `.${language}.js`));
}

export default function generateEntryFiles() {
  if (!buildConfig || !buildConfig.globs || !buildConfig.globs.component) {
    print.error('[arco-doc-site]', `Failed to get glob info of component, check your config file.`);
    process.exit(0);
  }

  const getRequirePath = (absolutePath) => {
    return path.relative(entryFileDir, absolutePath).replace(/^[^.]/, (str) => `./${str}`);
  };

  const generateEntry = (language) => {
    const entryFilePath = getPathEntryByLanguage(language);
    const fileContent = [
      "// Do NOT edit this file by yourself, it's generated by node script.",
      `export const ${VARIABLE_PREFIX}ModuleInfo = ARCO_SITE_MODULE_INFO;`,
      `export const ${VARIABLE_PREFIX}Config = ${JSON.stringify(siteConfig, null, 2).replace(
        /^"(.*)"$/s,
        (_, $1) => $1
      )};`,
    ];

    // Import hook
    const hookInfoMapName = `${VARIABLE_PREFIX}Hook`;
    fileContent.push(`const ${hookInfoMapName} = {};`);
    Object.entries(buildConfig.globs.hook || {}).forEach(([hookName, hookPattern]) => {
      const [hookPath] = glob.sync(hookPattern);
      if (hookPath) {
        fileContent.push(`import ${hookName} from '${getRequirePath(hookPath)}';`);
        fileContent.push(`${hookInfoMapName}.${hookName} = ${hookName};`);
      }
    });
    fileContent.push(`export { ${hookInfoMapName} };`);

    // Import pure markdown
    glob.sync(buildConfig.globs.doc).forEach((p, index) => {
      if (p.indexOf(language) > -1 && fs.existsSync(p)) {
        const ComponentName = `Doc${index}`;
        fileContent.push(`import * as _${ComponentName} from '${getRequirePath(p)}';`);
        fileContent.push(`export const ${ComponentName} = _${ComponentName};`);
      }
    });

    // Import component demos
    glob
      .sync(buildConfig.globs.component.base)
      .map((p) => {
        const { demo, doc, style } = buildConfig.globs.component;
        return {
          componentName: path
            .basename(p)
            .replace(
              /-(\w)/g,
              (_, $1) => `${$1.toUpperCase()}_${Math.random().toFixed(3).slice(-3)}`
            ),
          pathDemo: demo && path.resolve(p, demo),
          pathDoc: doc && path.resolve(p, doc),
          pathStyle: style && path.resolve(p, style),
        };
      })
      .forEach(({ componentName: moduleName, pathDemo, pathDoc, pathStyle }) => {
        let demoModuleName;
        let docModuleName;

        if (fs.existsSync(pathDemo)) {
          demoModuleName = `_${moduleName}`;
          fileContent.push(`import * as ${demoModuleName} from '${getRequirePath(pathDemo)}';`);
        }

        if (fs.existsSync(pathDoc)) {
          docModuleName = `_${moduleName}Doc`;
          fileContent.push(`import ${docModuleName} from '${getRequirePath(pathDoc)}';`);
        }

        if (buildConfig.withMaterialStyle && fs.existsSync(pathStyle)) {
          fileContent.push(`import '${pathStyle}';`);
        }

        if (demoModuleName || docModuleName) {
          fileContent.push(
            `export const ${moduleName} = { ${demoModuleName ? `...${demoModuleName}, ` : ''}${
              docModuleName ? `_SITE_DOC: ${docModuleName} ` : ''
            }};`
          );
        }
      });

    fs.ensureDirSync(entryFileDir);
    fs.writeFileSync(entryFilePath, fileContent.join('\n'));
  };

  siteConfig.languages.forEach(generateEntry);
}
